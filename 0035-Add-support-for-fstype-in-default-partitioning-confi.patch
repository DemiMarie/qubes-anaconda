From 7f76bff6e730bb507ea3723f28e59d0fa171c924 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Sun, 12 Feb 2023 03:38:37 +0100
Subject: [PATCH] Add support for fstype in default partitioning config

Allow setting specific fstype for individual partitions in the config.
This specifically allows different fstypes for different partitions.
The feature is optional - if fstype is not set, the behavior is
unchanged.

v2: drop unit test from AutomaticPartitioningTaskTestCase, as it isn't
part of the release tarball so the patch fails to apply
---
 pyanaconda/core/configuration/storage.py              | 11 +++++++++++
 .../modules/storage/partitioning/automatic/utils.py   |  2 +-
 .../pyanaconda_tests/core/test_configuration.py       | 11 +++++++++++
 3 files changed, 23 insertions(+), 1 deletion(-)

diff --git a/pyanaconda/core/configuration/storage.py b/pyanaconda/core/configuration/storage.py
index 292262787f..31c180b92f 100644
--- a/pyanaconda/core/configuration/storage.py
+++ b/pyanaconda/core/configuration/storage.py
@@ -180,6 +180,7 @@ class StorageSection(Section):
             min        The size will grow from min size to max size.
             max        The max size is unlimited by default.
             free       The required available space.
+            fstype     Force specific file system.
             btrfs      The mount point will be created only for the Btrfs scheme
 
         :return: a list of dictionaries with mount point attributes
@@ -219,6 +220,9 @@ class StorageSection(Section):
             if not value and name in ("btrfs", ):
                 # Handle a boolean attribute.
                 attrs[name] = True
+            elif value and name in ("fstype", ):
+                # str.
+                attrs[name] = value
             elif value and name in ("size", "min", "max", "free"):
                 # Handle a size attribute.
                 attrs[name] = Size(value)
@@ -245,3 +249,10 @@ class StorageSection(Section):
 
         if attrs.get("max") and not attrs.get("min"):
             raise ValueError("The attribute 'max' cannot be set without 'min'.")
+
+        # HACK: hardcode fs types here, didn't find a nice method to get just
+        # filesystem types from blivet, without other formats
+        if "fstype" in attrs and attrs.get("fstype") not in (
+                "ext2", "ext3", "ext4", "xfs", "vfat", "efi", "btrfs", "gfs2",
+                "jfs", "reiserfs", "hfs", "appleboot", "hfs+", "macefi", "ntfs"):
+            raise ValueError("Unsupported 'fstype' value")
diff --git a/pyanaconda/modules/storage/partitioning/automatic/utils.py b/pyanaconda/modules/storage/partitioning/automatic/utils.py
index b496950fcc..36e647d6c8 100644
--- a/pyanaconda/modules/storage/partitioning/automatic/utils.py
+++ b/pyanaconda/modules/storage/partitioning/automatic/utils.py
@@ -286,7 +286,7 @@ def get_part_spec(attrs):
 
     spec = PartSpec(
         mountpoint=name if not swap else None,
-        fstype=None if not swap else "swap",
+        fstype=attrs.get("fstype") if not swap else "swap",
         lv=True,
         thin=not swap,
         btr=not swap,
diff --git a/tests/unit_tests/pyanaconda_tests/core/test_configuration.py b/tests/unit_tests/pyanaconda_tests/core/test_configuration.py
index 1617e2116e..e5bcbefa23 100644
--- a/tests/unit_tests/pyanaconda_tests/core/test_configuration.py
+++ b/tests/unit_tests/pyanaconda_tests/core/test_configuration.py
@@ -441,6 +441,11 @@ class AnacondaConfigurationTestCase(unittest.TestCase):
             "name": "swap"
         }
 
+        assert convert_line("/home (fstype xfs)") == {
+            "name": "/home",
+            "fstype": "xfs",
+        }
+
         with pytest.raises(ValueError):
             convert_line("")
 
@@ -459,6 +464,12 @@ class AnacondaConfigurationTestCase(unittest.TestCase):
         with pytest.raises(ValueError):
             convert_line("/home  (max 2 GiB)")
 
+        with pytest.raises(ValueError):
+            convert_line("/home  (fstype invalid)")
+
+        with pytest.raises(ValueError):
+            convert_line("/home  (fstype)")
+
     def test_default_installation_source(self):
         conf = AnacondaConfiguration.from_defaults()
         assert conf.payload.default_source == SOURCE_TYPE_CLOSEST_MIRROR
-- 
2.45.2

